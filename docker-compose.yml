services:
  # QSS4 Backend Application
  qss4-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qss4-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://qss4:qss4_password@postgres:5432/qss4
      - REDIS_URL=redis://redis:6379/0
      - SESSION_SECRET=4f8d5e3a9c1b7e2f6d0a4c8b3e5f9a2d1c7b6e8f0a3d5e9c2b7a1f4e8d3c6b9
      - JWT_SECRET_KEY=7e3c5a9b8d2f1e6a0c4b8d3e5f9a2c7b1d6e8f0a3c5b9d2e7f1a4c8b6d5e9a0
      - FERNET_KEY=0OK_uL_frCzBhOoJGPKkS_6DHX3MRUmem9dluNL79KU=
      - STORAGE_PATH=/app/storage
      - POLYGON_RPC_URL=https://polygon-rpc.com
      - RATE_LIMIT_ENABLED=true
      - COMPRESSION_LEVEL=3
    volumes:
      - ./storage:/app/storage
      - ./keys:/app/keys
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - qss4-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qss4-postgres
    environment:
      - POSTGRES_DB=qss4
      - POSTGRES_USER=qss4
      - POSTGRES_PASSWORD=qss4_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - qss4-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qss4 -d qss4"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Session Store
  redis:
    image: redis:7-alpine
    container_name: qss4-redis
    command: redis-server --appendonly yes --requirepass redis_password
    environment:
      - REDIS_PASSWORD=redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - qss4-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: qss4-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - qss4-backend
    networks:
      - qss4-network
    restart: unless-stopped
    profiles:
      - production

  # PostgreSQL Admin Interface (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: qss4-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@qss4.local
      - PGADMIN_DEFAULT_PASSWORD=admin_password
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - qss4-network
    restart: unless-stopped
    profiles:
      - development

  # Redis Admin Interface (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: qss4-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - qss4-network
    restart: unless-stopped
    profiles:
      - development

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: qss4-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - qss4-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: qss4-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - qss4-network
    restart: unless-stopped
    profiles:
      - monitoring

# Named Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  qss4-network:
    driver: bridge
